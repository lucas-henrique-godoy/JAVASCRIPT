CURSO DE JAVASCRIPT
- Para abrir um novo terminal é só apertar CTRL + SHIFT + '.
- Para entrar no node é só abrir um terminal e digitar node.
- Dentro do node se quiser limpar a tela é só apertar CTRL + L.
- Se quiser sair do node é só digitar .exit.
- Se quiser sair do terminal normal(sem ser o node), é só digitar exit

- window.alert('Minha primeira mensagem!'); - Exibe um alerta com a mensagem 'Minha primeira mensagem!'        
- window.confirm('Está gostando de JS?'); - Exibe um diálogo de confirmação com a pergunta 'Está gostando de JS?'
- window.prompt('Qual é seu nome?: '); - Exibe um prompt com a pergunta 'Qual é seu nome?: ' e aguarda a entrada do usuário
- typeof - Mostra o tipo da variável no terminal.

Exemplo de concatenação:
nome = 'Lucas'
'Lucas'
> idade = 26
26
> nota = 10
10
> 'O aluno ' + nome + ' de ' + idade + ' anos tirou a nota: ' + nota + '!'
*saída no terminal: 'O aluno Lucas de 26 anos tirou a nota: 10!' 

Exemplo de Template String:
nome = 'Lucas'
'Lucas'
> idade = 26
26
> nota = 10
10
> `O aluno ${nome} de ${idade} anos tirou a nota: ${nota}!`
*saída no terminal: 'O aluno Lucas de 26 anos tirou a nota: 10!'
_______________________________________________________________________________________________________________________________________________________________________FORMATAÇÃO DE STRING:
var s = 'Javascript' 	   
- 'Eu estou aprendendo s'     ➔ não faz interpolação
- 'Eu estou aprendendo ' + s  ➔ usa concatenação
- `Eu estou aprendendo ${s}`  ➔ usa template string
_______________________________________________________________________________________________________________________________________________________________________
var s = 'Javascript'

- s.lenght         ➔ quantos caracteres a string tem
- s.toUpperCase()  ➔ tudo para MAIÚSCULAS
- s.toLowerCase()  ➔ tudo para minúsculas
_______________________________________________________________________________________________________________________________________________________________________
FORMTAÇÃO DE NÚMEROS:
> var n1 = 1545.5
undefined
> n1
1545.5
> n1.toFixed(2) ➔ formata para ter 2 casas decimais após a vírgula
'1545.50'
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

> n1.toFixed(2).replace('.', ',') ➔ Nesse exemplo troca o ponto pela vírgula
'1545,50'
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

> n1.toLocaleString('pt-BR', {style: 'currency', currency: 'BRL'}) ➔ converte o número em uma string formatada como valor monetário brasileiro, por exemplo: R$10,00.
'R$ 1.545,50'

n1.toLocaleString('pt-BR', {style: 'currency', currency: 'USD'}) ➔ converte o número em uma string formatada como valor monetário americano, por exemplo: US$10,00
n1.toLocaleString('pt-BR', {style: 'currency', currency: 'EUR'}) ➔ converte o número em uma string formatada como valor monetário euro, por exemplo: €10,00
_______________________________________________________________________________________________________________________________________________________________________
OPERADORES DE JAVASCRIPT
Os operadores em JavaScript são símbolos especiais que são usados para realizar operações em variáveis e valores. Eles podem ser categorizados em vários tipos principais, cada um com sua função específica. Abaixo, explico os principais tipos de operadores em JavaScript:

1. OPERADORES ARITMÉTICOS
Os operadores aritméticos são usados para realizar operações matemáticas básicas entre variáveis ou valores numéricos.

Adição (+): Soma dois operandos.
Subtração (-): Subtrai o operando direito do operando esquerdo.
Multiplicação (*): Multiplica dois operandos.
Divisão (/): Divide o operando esquerdo pelo operando direito.
Módulo (%): Retorna o resto da divisão inteira do operando esquerdo pelo operando direito.
Incremento (++) e Decremento (--): Aumenta ou diminui o valor de uma variável por 1.
Exemplo:


let a = 10;
let b = 5;
let soma = a + b; // soma é 15
let resto = a % b; // resto é 0
a++; // agora 'a' é 11
b--; // agora 'b' é 4

2. OPERADORES DE ATRIBUIÇÃO
Os operadores de atribuição são usados para atribuir valores a variáveis.

Atribuição simples (=): Atribui o valor do operando direito ao operando esquerdo.
Atribuição com operação combinada (+=, -=, *=, /=, %=): Realiza uma operação aritmética e atribui o resultado à variável.
Exemplo:

let x = 5;
x += 3; // x agora é 8

3. OPERADORES DE COMPARAÇÃO
Os operadores de comparação são usados para comparar dois valores ou variáveis e retornar um valor booleano (true ou false) indicando a relação entre eles.

Igual (==) e Estritamente Igual (===): Verifica se dois valores são iguais. O operador estritamente igual também verifica o tipo.
Diferente (!=) e Estritamente Diferente (!==): Verifica se dois valores são diferentes. O operador estritamente diferente também verifica o tipo.
Maior (>), Menor (<), Maior ou Igual (>=), Menor ou Igual (<=): Compara se um valor é maior, menor, maior ou igual ou menor ou igual ao outro.
Exemplo:

let num1 = 10;
let num2 = 5;
let igual = num1 === num2; // igual é false
let maiorQue = num1 > num2; // maiorQue é true

4. OPERADORES LÓGICOS
Os operadores lógicos são usados para combinar expressões condicionais e retornar um valor booleano.

E lógico (&&): Retorna verdadeiro se ambas as expressões forem verdadeiras.
OU lógico (||): Retorna verdadeiro se pelo menos uma das expressões for verdadeira.
NÃO lógico (!): Inverte o valor booleano de uma expressão.
Exemplo:

let idade = 25;
let temCarteira = true;
if (idade > 18 && temCarteira) {
    // Executa se a idade for maior que 18 e tiver carteira
}
5. Operadores Bitwise (Bit a Bit)
Os operadores bitwise são usados para manipular valores em nível de bits.

AND Bitwise (&): Retorna um 1 para cada bit se ambos os operandos tiverem um 1 no mesmo bit.
OR Bitwise (|): Retorna um 1 para cada bit se pelo menos um dos operandos tiver um 1 no mesmo bit.
XOR Bitwise (^): Retorna um 1 para cada bit se exatamente um dos operandos tiver um 1 no mesmo bit.
Deslocamento à Esquerda (<<) e Deslocamento à Direita (>>): Desloca os bits de um número para a esquerda ou direita, deslocando zeros à esquerda ou à direita.
Exemplo:

let num1 = 5; // em binário: 0101
let num2 = 3; // em binário: 0011
let resultadoAnd = num1 & num2; // resultadoAnd é 1 (binário: 0001)
let resultadoOr = num1 | num2; // resultadoOr é 7 (binário: 0111)
Conclusão
Os operadores em JavaScript são fundamentais para realizar desde operações simples até manipulações mais complexas de dados. Compreender como e quando usar cada tipo de operador é essencial para escrever código eficiente e funcional em JavaScript.

- ORDEM DE PRECEDÊNCIA DOS OPERADORES ARITMÉTICOS:
()
**
* / %   ➔ Se aparecer mais de um na mesma expressão, a precedência segue quem aparecer primeiro da esquerda para a direita.
+-
_______________________________________________________________________________________________________________________________________________________________________
ORDEM DE PRECEDÊNCIA SE TIVERMOS OS 3 TIPOS DE OPERADORES NA EXPRESSÃO: Devemos primeiro resolver os aritméticos depois os relacionais e por ultimo os lógicos.
1º ARITMÉTICOS
2º RELACIONAIS
3º LÓGICOS (nos lógicos deve-se fazer primeiro o NÃO depois o E, por último o OU)

EXEMPLO: 
> var a = 5
undefined
> var b = 8
undefined
> a > b && b % 2 == 0       
false ➔ resultado

*Nesse caso, resolvendo a parte aritmética primeiro, temos b = 8 % 2 com resultado 0. Então esta parte é verdadeira (true). Em seguida, resolvendo a parte relacional, temos a > b. Como 5 não é maior que 8, isso resulta em falso (false). Por fim, ao resolver a parte lógica, observamos que o operador && só retorna verdadeiro (true) se ambas as condições forem verdadeiras. Como uma parte é falsa (false) e a outra é verdadeira (true), de acordo com o operador &&, o resultado final é falso (false)._______________________________________________________________________________________________________________________________________________________________________
EXEMPLOS DE ATRIBUIÇÃO:

var n = 3

n = n + 4  ➔ SIMPLIFICANDO ➔ n += 4  ➔ SIMPLIFICANDO MAIS AINDA ➔ n++
n = n -5   ➔ SIMPLIFICANDO ➔ n -= 5  ➔ SIMPLIFICANDO MAIS AINDA ➔ n--
n = n * 4  ➔ SIMPLIFICANDO ➔ n *= 4
n = n / 2  ➔ SIMPLIFICANDO ➔ n /= 2
n = n ** 2 ➔ SIMPLIFICANDO ➔ n **= 2
n = n % 5  ➔ SIMPLIFICANDO ➔ n %= 5

OBS: Para simplificar expressões só funciona se a mesma variável receber ela mesma e outro valor. Por exemplo n = n + 4. Lê-se: n recebe o valor de n mais 4. Nesse caso podemos simplificar para n += 4. Se no caso fosse:  n = x + 4 não será possível simplificar.
_______________________________________________________________________________________________________________________________________________________________________
OPERADORES DE INCREMENTO: Primeiro mostram o valor anterior e depois realiza o incremento ou decremento.
var n = 10

n++ = 11
n-- = 10

PRÉ-INCREMENTO: Realiza as operações de incremento ou decremento primeiro e mostra o valor atual já com as operações feitas.
var = 10

++n = 11
--n = 10
_______________________________________________________________________________________________________________________________________________________________________
** EXEMPLOS DE OPERADORES RELACIONAIS: O resultado sempre é um booleano - true ou false

5 > 2  ➔ true
7 < 4  ➔ false
8 >= 8 ➔ true
9 <= 7 ➔ false
5 == 5 ➔ true
4 != 4 ➔ false
_______________________________________________________________________________________________________________________________________________________________________
** OPERADOR DE IGUALDADE: **
O operador de igualdade == testa apenas o valor das variáveis, sem considerar o tipo. Isso significa que ele tenta converter os operandos para o mesmo tipo antes de fazer a comparação. Por exemplo:

1 == '1'   // true, porque '1' é convertido para número antes da comparação
_______________________________________________________________________________________________________________________________________________________________________

OPERADOR DE IDENTIDADE:
O operador de identidade ===, também conhecido como operador de igualdade estrita, testa tanto o valor quanto o tipo das variáveis. Ele não faz conversões de tipo e retorna true apenas se os operandos são do mesmo tipo e têm o mesmo valor. Por exemplo:

1 === '1'  // false, porque são tipos diferentes (number e string)
Portanto, o uso do === é geralmente preferível quando se deseja garantir que tanto o valor quanto o tipo das variáveis sejam idênticos na comparação.
_______________________________________________________________________________________________________________________________________________________________________
Operador de Desigualdade Restrito (!==)
O operador !== é utilizado para verificar se dois valores são diferentes tanto em tipo quanto em valor. Ele retorna true se os operandos não são iguais e/ou não são do mesmo tipo. Por exemplo:

1 !== '1'   // true, porque são de tipos diferentes (number e string)
1 !== 1     // false, porque são do mesmo tipo e têm o mesmo valor
_______________________________________________________________________________________________________________________________________________________________________

MAIS EXEMPLOS:
5 == 5    ➔ TRUE
5 == '5'  ➔ TRUE
5 === '5' ➔ FALSE
5 === 5   ➔ TRUE
5 !== '5' ➔ TRUE // Operador de Desigualdade restrita
_______________________________________________________________________________________________________________________________________________________________________
EXEMPLOS DE OPERADORES LÓGICOS

!  ➔ NEGAÇÃO (NÃO)
&& ➔ CONJUNÇÃO (E)
|| ➔ DISJUNÇÃO (OU)
_______________________________________________________________________________________________________________________________________________________________________
OPERADOR TERNÁRIO:   TESTE   ?  TRUE :  FALSE
EXEMPLO 1:

var media = 5.5
> media > 7? 'APROVADO':'REPROVADO'
'REPROVADO' ➔ resultado
_______________________________________________________________________________________________________________________________________________________________________

EXEMPLO 2:
 > var x = 8
> var res = x % 2 == 0 ? 5: 9>
> x
8  ➔ resultado
> res
5  ➔ resultado
>

*OBS: O código JavaScript define uma variável x com o valor 8. Em seguida, usa um operador ternário para atribuir um valor à variável res com base na paridade de x:
Se x for par (ou seja, x % 2 == 0 é verdadeiro), então res recebe o valor 5.
Caso contrário (se x for ímpar), res recebe o valor 9.
Como x é 8 (um número par), res será atribuído o valor 5.
_______________________________________________________________________________________________________________________________________________________________________
EXEMPLO 3:
> var idade = 19
> var r = idade >= 18 ? 'MAIOR' : 'MENOR'
> r
'MAIOR' ➔ resultado.
_______________________________________________________________________________________________________________________________________________________________________** ENTENDO DOM- DOCUMENT OBJECT MODEL: Conjunto de objetos dentro do navegador que vai dar acesso aos componentes internos do website. Não funciona dentro do nodejs. O DOM esta presente quando estamos rodando javascript dentro do navegador.

-Árvore DOM: Começa da raiz, e essa raiz dentro do navegador é chamada de window.

Em JavaScript, "DOM" significa "Document Object Model" (Modelo de Objeto de Documento). O DOM é uma representação da estrutura hierárquica de um documento HTML (ou XML) que permite interação dinâmica com a página web. Aqui estão os principais pontos sobre o DOM em JavaScript:

Estrutura Hierárquica: O DOM organiza todos os elementos HTML de uma página em uma estrutura de árvore. Cada elemento, como <html>, <body>, <div>, <p>, entre outros, é representado por um nó no DOM.

Manipulação Dinâmica: JavaScript pode ser usado para acessar, modificar e manipular o conteúdo, estrutura e estilo da página web através do DOM. Isso permite que você adicione, remova ou altere elementos HTML, atributos e estilos em tempo de execução.

Acesso aos Elementos: Você pode acessar elementos individuais do DOM usando métodos como getElementById, getElementsByClassName, getElementsByTagName, querySelector, querySelectorAll, entre outros.

Eventos: O DOM também gerencia eventos, como cliques de mouse, pressionamentos de tecla e alterações de estado, permitindo que você responda a interações do usuário com a página.

Árvore DOM: A expressão "árvore do DOM" refere-se especificamente à estrutura hierárquica de nós que compõem o DOM. Essa estrutura começa com o nó raiz, que representa todo o documento (geralmente <html>), e se ramifica para os nós filhos (como <head>, <body>, <div>, etc.) e subsequentemente para outros nós, formando uma árvore de elementos.

** LOCATION, DOCUMENT E HISTORY **

Em JavaScript, location, document e history são objetos fundamentais que representam diferentes aspectos da janela do navegador e da sessão de navegação. Vamos explorar cada um deles:

window.location:

O objeto location representa a URL do documento atual carregado no navegador.
Ele possui propriedades como href, protocol, host, hostname, port, pathname, search e hash, que fornecem informações detalhadas sobre a URL atual.
Exemplo de uso:

console.log(window.location.href); // Exibe a URL completa da página atual
window.location.href = 'https://www.example.com'; // Redireciona para outra URL
window.document:

O objeto document representa o documento HTML carregado atualmente no navegador.
Ele fornece métodos para acessar e manipular elementos HTML e conteúdo dentro da página.
Exemplo de uso:

let header = document.getElementById('header'); // Acessa um elemento pelo seu ID
header.textContent = 'Novo Título'; // Altera o texto do elemento
window.history:

O objeto history fornece um histórico de navegação do navegador para a sessão atual.
Ele permite navegar para frente e para trás no histórico de navegação do usuário.
Exemplo de uso:

window.history.back(); // Navega para a página anterior no histórico
window.history.forward(); // Navega para a próxima página no histórico
_______________________________________________________________________________________________________________________________________________________________________
** SEELCIONADO ELEMENTOS DO SITE SITE COM DOM **

Selecionar elementos de um site utilizando o DOM (Document Object Model) em JavaScript é uma tarefa fundamental para interagir dinamicamente com o conteúdo da página. Aqui estão algumas maneiras comuns de selecionar elementos:

Métodos de Seleção de Elementos
Por ID (getElementById):

Este método seleciona um único elemento com base no seu atributo id.
Exemplo:

let elemento = document.getElementById('meuId');
Por Nome da Tag (getElementsByTagName):

Seleciona uma lista de elementos com base no nome da tag HTML.
Exemplo:

let paragrafos = document.getElementsByTagName('p');
Por Nome da Classe (getElementsByClassName):

Seleciona uma lista de elementos com base no nome da classe CSS.
Exemplo:

let itensDestaque = document.getElementsByClassName('destaque');
Seleção Avançada (querySelector e querySelectorAll):

querySelector: Seleciona o primeiro elemento que corresponde a um seletor CSS especificado.
Exemplo:

let primeiroParagrafo = document.querySelector('p');
querySelectorAll: Seleciona todos os elementos que correspondem a um seletor CSS especificado.
Exemplo:

let todosParagrafos = document.querySelectorAll('p');
Exemplos de Utilização
Manipulação de Estilo e Conteúdo:


// Seleciona um elemento pelo ID e altera seu conteúdo e estilo
let meuElemento = document.getElementById('meuId');
meuElemento.textContent = 'Novo texto aqui';
meuElemento.style.color = 'blue';
Iteração sobre Elementos Selecionados:


// Seleciona todos os elementos <p> e adiciona uma classe
let paragrafos = document.getElementsByTagName('p');
for (let i = 0; i < paragrafos.length; i++) {
    paragrafos[i].classList.add('estilo-novo');
}
Eventos e Interatividade:


// Adiciona um evento de clique a um botão
let meuBotao = document.getElementById('meuBotao');
meuBotao.addEventListener('click', function() {
    alert('Botão clicado!');
});
Considerações Adicionais
Performance: Quando possível, é recomendado usar querySelector e querySelectorAll, pois eles oferecem mais flexibilidade e, em alguns casos, melhor desempenho do que os métodos de seleção mais antigos.

Manipulação Segura: Sempre verifique se os elementos que você está tentando selecionar existem na página antes de manipulá-los, para evitar erros.

Compatibilidade: Os métodos mencionados são amplamente suportados pelos navegadores modernos. Para compatibilidade com versões mais antigas do Internet Explorer, por exemplo, podem ser necessárias abordagens alternativas.

Ao dominar esses métodos de seleção de elementos, você pode criar interações dinâmicas e eficazes dentro das suas aplicações web utilizando JavaScript e o DOM.
_______________________________________________________________________________________________________________________________________________________________________
** QUERYSELECTOR E QUERYSELECTORALL **

O querySelector é um método em JavaScript que permite selecionar um elemento HTML a partir de um documento usando um seletor CSS. Ele faz parte da API do Document Object Model (DOM) e é muito útil para manipular elementos HTML de maneira dinâmica.

Funcionamento básico:
Seleção de elementos: O querySelector permite selecionar elementos do DOM usando um seletor CSS. Ele retorna o primeiro elemento que corresponde ao seletor especificado.


const elemento = document.querySelector('seletor');
seletor pode ser qualquer seletor CSS válido, como '#id' para selecionar pelo ID, '.classe' para selecionar por classe, 'tag' para selecionar por tag, ou até seletores mais complexos como 'pai > filho', 'pai filho', etc.
Exemplo de uso:

html
Copiar código
<div id="meuId" class="minhaClasse">...</div>

const div = document.querySelector('#meuId'); // Seleciona pelo ID
const outraDiv = document.querySelector('.minhaClasse'); // Seleciona pela classe
Retorno: O método retorna null se nenhum elemento correspondente for encontrado.

Compatibilidade: querySelector é suportado em todos os navegadores modernos, incluindo IE8+.

querySelectorAll:
Além do querySelector, existe o querySelectorAll, que retorna uma NodeList contendo todos os elementos que correspondem ao seletor especificado:


const elementos = document.querySelectorAll('seletor');
Isso permite selecionar múltiplos elementos de uma vez.

Resumo:
querySelector: Retorna o primeiro elemento que corresponde ao seletor especificado.
querySelectorAll: Retorna todos os elementos que correspondem ao seletor especificado como uma NodeList.
Esses métodos são muito úteis para interagir com o conteúdo HTML de forma dinâmica e eficiente usando JavaScript.



 