CURSO DE JAVASCRIPT
- SITE PARA PEGAR EMOJIS E COLOCAR NA MINHA PÁGINA: https://unicode.org/emoji/charts/full-emoji-list.html
OBS: Os código dos emojis unicode são assim- EX: U+1F603(carinha rindo). Para coloca-lo num arquivo js é necessário colocar assim-EX: \u{1F603} -> Essa éa formatação unicode para javascript, e só funciona entre crases.
- Para abrir um novo terminal é só apertar CTRL + SHIFT + '.
- Para entrar no node é só abrir um terminal e digitar node.
- Dentro do node se quiser limpar a tela é só apertar CTRL + L.
- Se quiser sair do node é só digitar .exit.
- Se quiser sair do terminal normal(sem ser o node), é só digitar exit

- window.alert('Minha primeira mensagem!'); - Exibe um alerta com a mensagem 'Minha primeira mensagem!'        
- window.confirm('Está gostando de JS?'); - Exibe um diálogo de confirmação com a pergunta 'Está gostando de JS?'
- window.prompt('Qual é seu nome?: '); - Exibe um prompt com a pergunta 'Qual é seu nome?: ' e aguarda a entrada do usuário
- typeof - Mostra o tipo da variável no terminal.

Exemplo de concatenação:
nome = 'Lucas'
'Lucas'
> idade = 26
26
> nota = 10
10
> 'O aluno ' + nome + ' de ' + idade + ' anos tirou a nota: ' + nota + '!'
*saída no terminal: 'O aluno Lucas de 26 anos tirou a nota: 10!' 

Exemplo de Template String:
nome = 'Lucas'
'Lucas'
> idade = 26
26
> nota = 10
10
> `O aluno ${nome} de ${idade} anos tirou a nota: ${nota}!`
*saída no terminal: 'O aluno Lucas de 26 anos tirou a nota: 10!'
_______________________________________________________________________________________________________________________________________________________________________FORMATAÇÃO DE STRING:
var s = 'Javascript' 	   
- 'Eu estou aprendendo s'     ➔ não faz interpolação
- 'Eu estou aprendendo ' + s  ➔ usa concatenação
- `Eu estou aprendendo ${s}`  ➔ usa template string
_______________________________________________________________________________________________________________________________________________________________________
var s = 'Javascript'

- s.lenght         ➔ quantos caracteres a string tem
- s.toUpperCase()  ➔ tudo para MAIÚSCULAS
- s.toLowerCase()  ➔ tudo para minúsculas
_______________________________________________________________________________________________________________________________________________________________________
FORMTAÇÃO DE NÚMEROS:
> var n1 = 1545.5
undefined
> n1
1545.5
> n1.toFixed(2) ➔ formata para ter 2 casas decimais após a vírgula
'1545.50'
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

> n1.toFixed(2).replace('.', ',') ➔ Nesse exemplo troca o ponto pela vírgula
'1545,50'
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

> n1.toLocaleString('pt-BR', {style: 'currency', currency: 'BRL'}) ➔ converte o número em uma string formatada como valor monetário brasileiro, por exemplo: R$10,00.
'R$ 1.545,50'

n1.toLocaleString('pt-BR', {style: 'currency', currency: 'USD'}) ➔ converte o número em uma string formatada como valor monetário americano, por exemplo: US$10,00
n1.toLocaleString('pt-BR', {style: 'currency', currency: 'EUR'}) ➔ converte o número em uma string formatada como valor monetário euro, por exemplo: €10,00
_______________________________________________________________________________________________________________________________________________________________________
OPERADORES DE JAVASCRIPT
Os operadores em JavaScript são símbolos especiais que são usados para realizar operações em variáveis e valores. Eles podem ser categorizados em vários tipos principais, cada um com sua função específica. Abaixo, explico os principais tipos de operadores em JavaScript:

1. OPERADORES ARITMÉTICOS
Os operadores aritméticos são usados para realizar operações matemáticas básicas entre variáveis ou valores numéricos.

Adição (+): Soma dois operandos.
Subtração (-): Subtrai o operando direito do operando esquerdo.
Multiplicação (*): Multiplica dois operandos.
Divisão (/): Divide o operando esquerdo pelo operando direito.
Módulo (%): Retorna o resto da divisão inteira do operando esquerdo pelo operando direito.
Incremento (++) e Decremento (--): Aumenta ou diminui o valor de uma variável por 1.
Exemplo:


let a = 10;
let b = 5;
let soma = a + b; // soma é 15
let resto = a % b; // resto é 0
a++; // agora 'a' é 11
b--; // agora 'b' é 4

2. OPERADORES DE ATRIBUIÇÃO
Os operadores de atribuição são usados para atribuir valores a variáveis.

Atribuição simples (=): Atribui o valor do operando direito ao operando esquerdo.
Atribuição com operação combinada (+=, -=, *=, /=, %=): Realiza uma operação aritmética e atribui o resultado à variável.
Exemplo:

let x = 5;
x += 3; // x agora é 8

3. OPERADORES DE COMPARAÇÃO
Os operadores de comparação são usados para comparar dois valores ou variáveis e retornar um valor booleano (true ou false) indicando a relação entre eles.

Igual (==) e Estritamente Igual (===): Verifica se dois valores são iguais. O operador estritamente igual também verifica o tipo.
Diferente (!=) e Estritamente Diferente (!==): Verifica se dois valores são diferentes. O operador estritamente diferente também verifica o tipo.
Maior (>), Menor (<), Maior ou Igual (>=), Menor ou Igual (<=): Compara se um valor é maior, menor, maior ou igual ou menor ou igual ao outro.
Exemplo:

let num1 = 10;
let num2 = 5;
let igual = num1 === num2; // igual é false
let maiorQue = num1 > num2; // maiorQue é true

4. OPERADORES LÓGICOS
Os operadores lógicos são usados para combinar expressões condicionais e retornar um valor booleano.

E lógico (&&): Retorna verdadeiro se ambas as expressões forem verdadeiras.
OU lógico (||): Retorna verdadeiro se pelo menos uma das expressões for verdadeira.
NÃO lógico (!): Inverte o valor booleano de uma expressão.
Exemplo:

let idade = 25;
let temCarteira = true;
if (idade > 18 && temCarteira) {
    // Executa se a idade for maior que 18 e tiver carteira
}
5. Operadores Bitwise (Bit a Bit)
Os operadores bitwise são usados para manipular valores em nível de bits.

AND Bitwise (&): Retorna um 1 para cada bit se ambos os operandos tiverem um 1 no mesmo bit.
OR Bitwise (|): Retorna um 1 para cada bit se pelo menos um dos operandos tiver um 1 no mesmo bit.
XOR Bitwise (^): Retorna um 1 para cada bit se exatamente um dos operandos tiver um 1 no mesmo bit.
Deslocamento à Esquerda (<<) e Deslocamento à Direita (>>): Desloca os bits de um número para a esquerda ou direita, deslocando zeros à esquerda ou à direita.
Exemplo:

let num1 = 5; // em binário: 0101
let num2 = 3; // em binário: 0011
let resultadoAnd = num1 & num2; // resultadoAnd é 1 (binário: 0001)
let resultadoOr = num1 | num2; // resultadoOr é 7 (binário: 0111)
Conclusão
Os operadores em JavaScript são fundamentais para realizar desde operações simples até manipulações mais complexas de dados. Compreender como e quando usar cada tipo de operador é essencial para escrever código eficiente e funcional em JavaScript.

- ORDEM DE PRECEDÊNCIA DOS OPERADORES ARITMÉTICOS:
()
**
* / %   ➔ Se aparecer mais de um na mesma expressão, a precedência segue quem aparecer primeiro da esquerda para a direita.
+-
_______________________________________________________________________________________________________________________________________________________________________
ORDEM DE PRECEDÊNCIA SE TIVERMOS OS 3 TIPOS DE OPERADORES NA EXPRESSÃO: Devemos primeiro resolver os aritméticos depois os relacionais e por ultimo os lógicos.
1º ARITMÉTICOS
2º RELACIONAIS
3º LÓGICOS (nos lógicos deve-se fazer primeiro o NÃO depois o E, por último o OU)

EXEMPLO: 
> var a = 5
undefined
> var b = 8
undefined
> a > b && b % 2 == 0       
false ➔ resultado

*Nesse caso, resolvendo a parte aritmética primeiro, temos b = 8 % 2 com resultado 0. Então esta parte é verdadeira (true). Em seguida, resolvendo a parte relacional, temos a > b. Como 5 não é maior que 8, isso resulta em falso (false). Por fim, ao resolver a parte lógica, observamos que o operador && só retorna verdadeiro (true) se ambas as condições forem verdadeiras. Como uma parte é falsa (false) e a outra é verdadeira (true), de acordo com o operador &&, o resultado final é falso (false)._______________________________________________________________________________________________________________________________________________________________________
EXEMPLOS DE ATRIBUIÇÃO:

var n = 3

n = n + 4  ➔ SIMPLIFICANDO ➔ n += 4  ➔ SIMPLIFICANDO MAIS AINDA ➔ n++
n = n -5   ➔ SIMPLIFICANDO ➔ n -= 5  ➔ SIMPLIFICANDO MAIS AINDA ➔ n--
n = n * 4  ➔ SIMPLIFICANDO ➔ n *= 4
n = n / 2  ➔ SIMPLIFICANDO ➔ n /= 2
n = n ** 2 ➔ SIMPLIFICANDO ➔ n **= 2
n = n % 5  ➔ SIMPLIFICANDO ➔ n %= 5

OBS: Para simplificar expressões só funciona se a mesma variável receber ela mesma e outro valor. Por exemplo n = n + 4. Lê-se: n recebe o valor de n mais 4. Nesse caso podemos simplificar para n += 4. Se no caso fosse:  n = x + 4 não será possível simplificar.
_______________________________________________________________________________________________________________________________________________________________________
OPERADORES DE INCREMENTO: Primeiro mostram o valor anterior e depois realiza o incremento ou decremento.
var n = 10

n++ = 11
n-- = 10

PRÉ-INCREMENTO: Realiza as operações de incremento ou decremento primeiro e mostra o valor atual já com as operações feitas.
var = 10

++n = 11
--n = 10
_______________________________________________________________________________________________________________________________________________________________________
** EXEMPLOS DE OPERADORES RELACIONAIS: O resultado sempre é um booleano - true ou false

5 > 2  ➔ true
7 < 4  ➔ false
8 >= 8 ➔ true
9 <= 7 ➔ false
5 == 5 ➔ true
4 != 4 ➔ false
_______________________________________________________________________________________________________________________________________________________________________
** OPERADOR DE IGUALDADE: **
O operador de igualdade == testa apenas o valor das variáveis, sem considerar o tipo. Isso significa que ele tenta converter os operandos para o mesmo tipo antes de fazer a comparação. Por exemplo:

1 == '1'   // true, porque '1' é convertido para número antes da comparação
_______________________________________________________________________________________________________________________________________________________________________

OPERADOR DE IDENTIDADE:
O operador de identidade ===, também conhecido como operador de igualdade estrita, testa tanto o valor quanto o tipo das variáveis. Ele não faz conversões de tipo e retorna true apenas se os operandos são do mesmo tipo e têm o mesmo valor. Por exemplo:

1 === '1'  // false, porque são tipos diferentes (number e string)
Portanto, o uso do === é geralmente preferível quando se deseja garantir que tanto o valor quanto o tipo das variáveis sejam idênticos na comparação.
_______________________________________________________________________________________________________________________________________________________________________
Operador de Desigualdade Restrito (!==)
O operador !== é utilizado para verificar se dois valores são diferentes tanto em tipo quanto em valor. Ele retorna true se os operandos não são iguais e/ou não são do mesmo tipo. Por exemplo:

1 !== '1'   // true, porque são de tipos diferentes (number e string)
1 !== 1     // false, porque são do mesmo tipo e têm o mesmo valor
_______________________________________________________________________________________________________________________________________________________________________

MAIS EXEMPLOS:
5 == 5    ➔ TRUE
5 == '5'  ➔ TRUE
5 === '5' ➔ FALSE
5 === 5   ➔ TRUE
5 !== '5' ➔ TRUE // Operador de Desigualdade restrita
_______________________________________________________________________________________________________________________________________________________________________
EXEMPLOS DE OPERADORES LÓGICOS

!  ➔ NEGAÇÃO (NÃO)
&& ➔ CONJUNÇÃO (E)
|| ➔ DISJUNÇÃO (OU)
_______________________________________________________________________________________________________________________________________________________________________
OPERADOR TERNÁRIO:   TESTE   ?  TRUE :  FALSE
EXEMPLO 1:

var media = 5.5
> media > 7? 'APROVADO':'REPROVADO'
'REPROVADO' ➔ resultado
_______________________________________________________________________________________________________________________________________________________________________

EXEMPLO 2:
 > var x = 8
> var res = x % 2 == 0 ? 5: 9>
> x
8  ➔ resultado
> res
5  ➔ resultado
>

*OBS: O código JavaScript define uma variável x com o valor 8. Em seguida, usa um operador ternário para atribuir um valor à variável res com base na paridade de x:
Se x for par (ou seja, x % 2 == 0 é verdadeiro), então res recebe o valor 5.
Caso contrário (se x for ímpar), res recebe o valor 9.
Como x é 8 (um número par), res será atribuído o valor 5.
_______________________________________________________________________________________________________________________________________________________________________
EXEMPLO 3:
> var idade = 19
> var r = idade >= 18 ? 'MAIOR' : 'MENOR'
> r
'MAIOR' ➔ resultado.
_______________________________________________________________________________________________________________________________________________________________________** ENTENDO DOM- DOCUMENT OBJECT MODEL: Conjunto de objetos dentro do navegador que vai dar acesso aos componentes internos do website. Não funciona dentro do nodejs. O DOM esta presente quando estamos rodando javascript dentro do navegador.

-Árvore DOM: Começa da raiz, e essa raiz dentro do navegador é chamada de window.

Em JavaScript, "DOM" significa "Document Object Model" (Modelo de Objeto de Documento). O DOM é uma representação da estrutura hierárquica de um documento HTML (ou XML) que permite interação dinâmica com a página web. Aqui estão os principais pontos sobre o DOM em JavaScript:

Estrutura Hierárquica: O DOM organiza todos os elementos HTML de uma página em uma estrutura de árvore. Cada elemento, como <html>, <body>, <div>, <p>, entre outros, é representado por um nó no DOM.

Manipulação Dinâmica: JavaScript pode ser usado para acessar, modificar e manipular o conteúdo, estrutura e estilo da página web através do DOM. Isso permite que você adicione, remova ou altere elementos HTML, atributos e estilos em tempo de execução.

Acesso aos Elementos: Você pode acessar elementos individuais do DOM usando métodos como getElementById, getElementsByClassName, getElementsByTagName, querySelector, querySelectorAll, entre outros.

Eventos: O DOM também gerencia eventos, como cliques de mouse, pressionamentos de tecla e alterações de estado, permitindo que você responda a interações do usuário com a página.

Árvore DOM: A expressão "árvore do DOM" refere-se especificamente à estrutura hierárquica de nós que compõem o DOM. Essa estrutura começa com o nó raiz, que representa todo o documento (geralmente <html>), e se ramifica para os nós filhos (como <head>, <body>, <div>, etc.) e subsequentemente para outros nós, formando uma árvore de elementos.

** LOCATION, DOCUMENT E HISTORY **

Em JavaScript, location, document e history são objetos fundamentais que representam diferentes aspectos da janela do navegador e da sessão de navegação. Vamos explorar cada um deles:

window.location:

O objeto location representa a URL do documento atual carregado no navegador.
Ele possui propriedades como href, protocol, host, hostname, port, pathname, search e hash, que fornecem informações detalhadas sobre a URL atual.
Exemplo de uso:

console.log(window.location.href); // Exibe a URL completa da página atual
window.location.href = 'https://www.example.com'; // Redireciona para outra URL
window.document:

O objeto document representa o documento HTML carregado atualmente no navegador.
Ele fornece métodos para acessar e manipular elementos HTML e conteúdo dentro da página.
Exemplo de uso:

let header = document.getElementById('header'); // Acessa um elemento pelo seu ID
header.textContent = 'Novo Título'; // Altera o texto do elemento
window.history:

O objeto history fornece um histórico de navegação do navegador para a sessão atual.
Ele permite navegar para frente e para trás no histórico de navegação do usuário.
Exemplo de uso:

window.history.back(); // Navega para a página anterior no histórico
window.history.forward(); // Navega para a próxima página no histórico
_______________________________________________________________________________________________________________________________________________________________________
** SEELCIONADO ELEMENTOS DO SITE SITE COM DOM **

Selecionar elementos de um site utilizando o DOM (Document Object Model) em JavaScript é uma tarefa fundamental para interagir dinamicamente com o conteúdo da página. Aqui estão algumas maneiras comuns de selecionar elementos:

Métodos de Seleção de Elementos
Por ID (getElementById):

Este método seleciona um único elemento com base no seu atributo id.
Exemplo:

let elemento = document.getElementById('meuId');
Por Nome da Tag (getElementsByTagName):

Seleciona uma lista de elementos com base no nome da tag HTML.
Exemplo:

let paragrafos = document.getElementsByTagName('p');
Por Nome da Classe (getElementsByClassName):

Seleciona uma lista de elementos com base no nome da classe CSS.
Exemplo:

let itensDestaque = document.getElementsByClassName('destaque');
Seleção Avançada (querySelector e querySelectorAll):

querySelector: Seleciona o primeiro elemento que corresponde a um seletor CSS especificado.
Exemplo:

let primeiroParagrafo = document.querySelector('p');
querySelectorAll: Seleciona todos os elementos que correspondem a um seletor CSS especificado.
Exemplo:

let todosParagrafos = document.querySelectorAll('p');
Exemplos de Utilização
Manipulação de Estilo e Conteúdo:


// Seleciona um elemento pelo ID e altera seu conteúdo e estilo
let meuElemento = document.getElementById('meuId');
meuElemento.textContent = 'Novo texto aqui';
meuElemento.style.color = 'blue';
Iteração sobre Elementos Selecionados:


// Seleciona todos os elementos <p> e adiciona uma classe
let paragrafos = document.getElementsByTagName('p');
for (let i = 0; i < paragrafos.length; i++) {
    paragrafos[i].classList.add('estilo-novo');
}
Eventos e Interatividade:


// Adiciona um evento de clique a um botão
let meuBotao = document.getElementById('meuBotao');
meuBotao.addEventListener('click', function() {
    alert('Botão clicado!');
});
Considerações Adicionais
Performance: Quando possível, é recomendado usar querySelector e querySelectorAll, pois eles oferecem mais flexibilidade e, em alguns casos, melhor desempenho do que os métodos de seleção mais antigos.

Manipulação Segura: Sempre verifique se os elementos que você está tentando selecionar existem na página antes de manipulá-los, para evitar erros.

Compatibilidade: Os métodos mencionados são amplamente suportados pelos navegadores modernos. Para compatibilidade com versões mais antigas do Internet Explorer, por exemplo, podem ser necessárias abordagens alternativas.

Ao dominar esses métodos de seleção de elementos, você pode criar interações dinâmicas e eficazes dentro das suas aplicações web utilizando JavaScript e o DOM.
_______________________________________________________________________________________________________________________________________________________________________
** QUERYSELECTOR E QUERYSELECTORALL **

O querySelector é um método em JavaScript que permite selecionar um elemento HTML a partir de um documento usando um seletor CSS. Ele faz parte da API do Document Object Model (DOM) e é muito útil para manipular elementos HTML de maneira dinâmica.

Funcionamento básico:
Seleção de elementos: O querySelector permite selecionar elementos do DOM usando um seletor CSS. Ele retorna o primeiro elemento que corresponde ao seletor especificado.


const elemento = document.querySelector('seletor');
seletor pode ser qualquer seletor CSS válido, como '#id' para selecionar pelo ID, '.classe' para selecionar por classe, 'tag' para selecionar por tag, ou até seletores mais complexos como 'pai > filho', 'pai filho', etc.
Exemplo de uso:


<div id="meuId" class="minhaClasse">...</div>

const div = document.querySelector('#meuId'); // Seleciona pelo ID
const outraDiv = document.querySelector('.minhaClasse'); // Seleciona pela classe
Retorno: O método retorna null se nenhum elemento correspondente for encontrado.

Compatibilidade: querySelector é suportado em todos os navegadores modernos, incluindo IE8+.

querySelectorAll:
Além do querySelector, existe o querySelectorAll, que retorna uma NodeList contendo todos os elementos que correspondem ao seletor especificado:


const elementos = document.querySelectorAll('seletor');
Isso permite selecionar múltiplos elementos de uma vez.

Resumo:
querySelector: Retorna o primeiro elemento que corresponde ao seletor especificado.
querySelectorAll: Retorna todos os elementos que correspondem ao seletor especificado como uma NodeList.
Esses métodos são muito úteis para interagir com o conteúdo HTML de forma dinâmica e eficiente usando JavaScript.
_______________________________________________________________________________________________________________________________________________________________________
EXPLICANDO O EXEMPLO DA AULA 10 EX007- CALCULADORA UTILIZANDO INPUTS:
Vamos analisar o código passo a passo e explicar o que está acontecendo e o motivo de cada parte ser feita dessa forma:

HTML Estrutura:

<h1>Somando Valores</h1>
<input type="number" name="txtn1" id="txtn1"> +
<input type="number" name="txtn2" id="txtn2">
<input type="button" value="Somar" onclick="somar()">
<div id="res">Resultado</div>
<h1>: Define o título principal da página como "Somando Valores".
<input type="number" name="txtn1" id="txtn1">: Um campo de entrada onde o usuário pode digitar o primeiro número a ser somado.
+: Um sinal de adição simplesmente para exibir junto com os inputs, indicando que os campos são para soma.
<input type="number" name="txtn2" id="txtn2">: Outro campo de entrada para o segundo número.
<input type="button" value="Somar" onclick="somar()">: Um botão que, quando clicado, chama a função somar().
<div id="res">Resultado</div>: Uma div vazia inicialmente que será usada para exibir o resultado da soma.

_______________________________________________________________________________________________________________________________________________________________________
JavaScript (Função somar()):

function somar() {
    var tn1 = window.document.getElementById('txtn1'); // Obtém o input do primeiro número
    var tn2 = window.document.querySelector('input#txtn2'); // Obtém o input do segundo número usando querySelector
    var res = window.document.getElementById('res'); // Obtém a div onde será exibido o resultado
    var n1 = Number(tn1.value); // Converte o valor do primeiro input para número
    var n2 = Number(tn2.value); // Converte o valor do segundo input para número
    var s = n1 + n2; // Calcula a soma dos dois números
    res.innerHTML = `A soma entre ${n1} e ${n2} é: <strong>${s}</strong>`; // Exibe o resultado na div 'res'
}
var tn1 = window.document.getElementById('txtn1');: Obtém a referência para o elemento de input do primeiro número utilizando getElementById(). Isso permite acessar diretamente o elemento no DOM.
var tn2 = window.document.querySelector('input#txtn2');: Obtém a referência para o elemento de input do segundo número utilizando querySelector('input#txtn2'). querySelector permite selecionar elementos com maior flexibilidade, neste caso, usando um seletor de ID específico.
var res = window.document.getElementById('res');: Obtém a referência para a div onde o resultado será exibido utilizando getElementById('res').
var n1 = Number(tn1.value); e var n2 = Number(tn2.value);: Converte os valores dos campos de input (que são strings por padrão) em números usando Number(). Isso é importante para garantir que os valores sejam tratados corretamente como números ao realizar a operação de soma.
var s = n1 + n2;: Realiza a soma dos dois números.
res.innerHTML = A soma entre ${n1} e ${n2} é: <strong>${s}</strong>;: Atualiza o conteúdo da div res com uma mensagem formatada que inclui os números somados e o resultado dentro de tags HTML <strong>, garantindo que o resultado seja destacado visualmente.

Motivos para essa abordagem:
Acesso ao DOM: Utiliza métodos como getElementById e querySelector para obter referências aos elementos específicos do HTML (inputs e div de resultado). Isso é feito para manipular diretamente esses elementos no JavaScript.

Conversão de tipos: Converte os valores dos inputs para números (Number(tn1.value) e Number(tn2.value)) para que a operação de soma seja matematicamente correta. Inputs de tipo number armazenam valores como strings, então a conversão é necessária para realizar operações numéricas.

Atualização dinâmica: A função somar() é acionada pelo botão Somar e atualiza dinamicamente o conteúdo da div res com o resultado da soma. Isso proporciona uma experiência interativa para o usuário, mostrando o resultado imediatamente após o clique no botão.

Clareza e organização: Usar variáveis para armazenar referências e valores intermediários torna o código mais claro e fácil de entender. Cada variável tem um propósito específico dentro da função somar(), melhorando a legibilidade e facilitando futuras modificações ou manutenções no código.

Portanto, essa abordagem combina acessos ao DOM, manipulação de valores e atualização dinâmica do conteúdo HTML para criar uma funcionalidade simples de soma de números, seguindo práticas recomendadas para desenvolvimento web.
_______________________________________________________________________________________________________________________________________________________________________

ESRUTURAS CONDICIONAIS:

No JavaScript, as estruturas condicionais são usadas para controlar o fluxo de execução do código com base em condições específicas. Existem várias formas de estruturas condicionais que podem ser utilizadas:

1. if-else
O if é a estrutura condicional mais básica e permite executar um bloco de código se uma condição for verdadeira. O else opcional permite executar um bloco de código alternativo caso a condição seja falsa.

Exemplo:
o
let idade = 18;

if (idade >= 18) {
    console.log("Pode votar!");
} else {
    console.log("Não pode votar ainda.");
}

2. if-else if-else
Esta estrutura permite verificar múltiplas condições encadeadas. O else if é usado para adicionar condições adicionais além da primeira if.

Exemplo:

let nota = 75;

if (nota >= 90) {
    console.log("Aprovado com nota A");
} else if (nota >= 80) {
    console.log("Aprovado com nota B");
} else if (nota >= 70) {
    console.log("Aprovado com nota C");
} else {
    console.log("Reprovado");
}

3. Switch
O switch é útil quando se deseja avaliar uma expressão com várias possíveis condições e executar um bloco de código diferente para cada valor possível. Útil para valore fixos, não tão útil em intervalos de valores, onde o ideal é utilizar if/else (ex: quero testar entre uma valor e outro). O break no switch é obrigatório.O Switch só funciona com strings e números inteiros.

Exemplo:

let diaSemana = 3;
let nomeDia;

switch (diaSemana) {
    case 1:
        nomeDia = "Segunda-feira";
        break;
    case 2:
        nomeDia = "Terça-feira";
        break;
    case 3:
        nomeDia = "Quarta-feira";
        break;
    case 4:
        nomeDia = "Quinta-feira";
        break;
    case 5:
        nomeDia = "Sexta-feira";
        break;
    default:
        nomeDia = "Fim de semana";
}
console.log(`Hoje é ${nomeDia}`);

4. Operador Ternário ( ? : )
O operador ternário é uma forma compacta de escrever uma instrução if-else em uma única linha.

Exemplo:

let velocidade = 90;
let mensagem = (velocidade > 80) ? "Velocidade muito alta" : "Velocidade dentro do limite";
console.log(mensagem);
Essas estruturas condicionais são fundamentais para a lógica de programação em JavaScript, permitindo que os desenvolvedores controlem o fluxo de execução com base em diferentes condições e variáveis.
_______________________________________________________________________________________________________________________________________________________________________
-ESTRUTURAS DE REPETIÇÃO: Em JavaScript, as estruturas de repetição permitem que você execute um bloco de código repetidamente enquanto uma condição específica é verdadeira. Existem várias maneiras de implementar loops em JavaScript, sendo as mais comuns:

for loop:
O loop for é usado quando você sabe exatamente quantas vezes deseja repetir uma ação. Ele possui a seguinte estrutura:

for (inicialização; condição; incremento/decremento) {
    // código a ser repetido
}
inicialização: normalmente inicializa uma variável de controle do loop.
condição: verifica se o loop deve continuar ou não.
incremento/decremento: atualiza a variável de controle após cada iteração.
Exemplo:

for (let i = 0; i < 5; i++) {
    console.log(i);
}
Isso imprimirá os números de 0 a 4 no console.

while loop:
O loop while repete um bloco de código enquanto uma condição especificada é verdadeira:

while (condição) {
    // código a ser repetido
}
Exemplo:

let i = 0;
while (i < 5) {
    console.log(i);
    i++;
}
Este código também imprimirá os números de 0 a 4.

do-while loop:
O loop do-while é semelhante ao while, mas garante que o bloco de código seja executado pelo menos uma vez, mesmo se a condição for falsa no início:

do {
    // código a ser repetido
} while (condição);
Exemplo:

let i = 0;
do {
    console.log(i);
    i++;
} while (i < 5);
Este também imprimirá os números de 0 a 4.

Essas estruturas de repetição são fundamentais para controlar o fluxo de execução do código em JavaScript, permitindo que você automatize tarefas repetitivas e itere sobre coleções de dados, como arrays. É importante ter cuidado para evitar loops infinitos, onde a condição nunca se torna falsa, o que pode travar o navegador ou o ambiente de execução JavaScript.


_______________________________________________________________________________________________________________________________________________________________________
- ARRAY : Um array/vetor/variável composta é uma variável que tem vários elementos, cada elemento é composto por seu valor e por uma chave de identificação.

EX: Vamos analisar o código passo a passo:

let num = [5, 8, 2, 9, 3];
num[5] = 6;
num.push(7);
num.length;
num.sort();
console.log(num);
Passo a passo da explicação:
Inicialização do array num:

let num = [5, 8, 2, 9, 3];
Aqui, num é declarado como um array contendo os números [5, 8, 2, 9, 3].

Atribuição de valor a num[5]:

num[5] = 6;
Esta linha atribui o valor 6 à posição num[5] do array. No entanto, o array original num tinha apenas 5 elementos (índices de 0 a 4), então ao fazer num[5] = 6, você está efetivamente adicionando um sexto elemento ao array e definindo seu valor como 6.

Uso do método push():

num.push(7);
O método push() é usado para adicionar um elemento ao final do array. Aqui, estamos adicionando o número 7 ao final do array num. Após essa operação, num terá os elementos [5, 8, 2, 9, 3, 6, 7].

Acesso ao atributo length:

num.length;
O atributo length de um array retorna o número de elementos no array. Neste caso, num.length retorna 7, pois agora o array num tem 7 elementos.

Uso do método sort():

num.sort();
O método sort() é usado para ordenar os elementos de um array em ordem alfabética (para strings) ou em ordem numérica crescente (para números). Após a execução deste método, o array num será ordenado numericamente, resultando em [2, 3, 5, 6, 7, 8, 9].

Saída no console:

console.log(num);
Por fim, console.log(num) imprime o array num ordenado [2, 3, 5, 6, 7, 8, 9] no console.

Resumo dos métodos, atributos e ações realizadas:
num[5] = 6: Adiciona o número 6 na posição 5 do array num.
num.push(7): Adiciona o número 7 ao final do array num.
num.length: Retorna o número de elementos atualmente no array num.
num.sort(): Ordena os elementos do array num em ordem numérica crescente.
console.log(num): Imprime o array num no console do navegador ou do ambiente de execução JavaScript.
Com isso, o array num passa de [5, 8, 2, 9, 3] para [2, 3, 5, 6, 7, 8, 9] após a execução de todas as instruções fornecidas.
_______________________________________________________________________________________________________________________________________________________________________

OBS: É possível iterar sobre array utilizando estruturas de repetição:
Exemplo utilizando for: 

let valores = [8, 1, 7, 4, 2, 9]

for (let pos = 0; pos < valores.length; pos++) {
    console.log(`A posição ${pos} tem o valor ${valores[pos]}`)
}
_______________________________________________________________________________________________________________________________________________________________________

Exemplo simplificado:

let valores = [8, 1, 7, 4, 2, 9]

for (let pos in valores) {
    console.log(`A posição ${pos} tem o valor ${valores[pos]}`)
}

_______________________________________________________________________________________________________________________________________________________________________

indexOF(): Retorna a posição dentro de um array em que um valor esta. 
EX: let num = [4, 5, 6, 7, 8]
num.indexOF(7)


OBS: O método indexOf() é usado para encontrar a posição de um elemento específico dentro de um array em JavaScript. Vamos explicar passo a passo o que acontece:

Passo a Passo da Execução:
Criação do Array:

let num = [4, 5, 6, 7, 8];: Define o array num com os valores [4, 5, 6, 7, 8].
Chamada do Método indexOf():

num.indexOf(7): Chama o método indexOf() no array num, passando o valor 7 como argumento.
Execução do Método indexOf():

O método indexOf(7) percorre o array num procurando pelo valor 7.
Resultado da Busca:

Como 7 está presente no array num, o método indexOf() retorna o índice da primeira ocorrência de 7.
Neste caso, 7 está no índice 3 (lembrando que os índices em JavaScript começam em 0), então num.indexOf(7) retorna 3.
Saída do Resultado:

Se você imprimir o resultado de num.indexOf(7), obterá 3.
Considerações Adicionais:
Retorno quando o Elemento não é Encontrado:

Se o elemento não estiver presente no array, o método indexOf() retornará -1.
Por exemplo, num.indexOf(10) retornaria -1 porque 10 não está no array num.
Comparação de Elementos:

O método indexOf() compara os elementos usando o operador de igualdade estrita (===). Isso significa que ele compara tanto o valor quanto o tipo do elemento.
Exemplo Prático:
javascript
Copiar código
let num = [4, 5, 6, 7, 8];
let indiceSete = num.indexOf(7);

console.log(`O índice do valor 7 é: ${indiceSete}`); // Saída: O índice do valor 7 é: 3
Este código imprime no console o índice da primeira ocorrência do valor 7 no array num, que é 3.
_______________________________________________________________________________________________________________________________________________________________________
-FUNÇÕES: São ações executadas assim que são chamadas ou em decorrência de algum evento. Uma função pode receber parâmetros retornar um resultado.
_______________________________________________________________________________________________________________________________________________________________________
- OBEJEOS: Em JavaScript, objetos são estruturas fundamentais que permitem armazenar e organizar dados de forma mais complexa do que simples variáveis primitivas como números, strings ou booleanos. Eles são usados para representar entidades ou conceitos do mundo real de uma maneira mais abstrata e flexível. Vamos explorar os conceitos básicos e a sintaxe de objetos em JavaScript:

Sintaxe Básica de Objetos
Em JavaScript, um objeto é definido utilizando chaves {} e consiste em pares de chave-valor, onde a chave é uma string (também chamada de propriedade) que atua como identificador da propriedade e o valor pode ser qualquer tipo de dado, incluindo outros objetos. A sintaxe geral é a seguinte:

javascript
Copiar código
let pessoa = {
    nome: 'João',
    idade: 30,
    altura: 1.75,
    casado: false,
    endereco: {
        rua: 'Rua das Flores',
        numero: 123
    },
    hobbies: ['futebol', 'leitura', 'viagens'],
    saudacao: function() {
        return `Olá, meu nome é ${this.nome} e eu tenho ${this.idade} anos.`;
    }
};
Neste exemplo:

nome, idade, altura, casado: São propriedades do objeto pessoa, onde cada uma possui um valor associado (string, número, booleano).

endereco: É uma propriedade que contém outro objeto (objeto aninhado) com suas próprias propriedades (rua e numero).

hobbies: É uma propriedade que contém um array de strings.

saudacao: É um método (função) que está definido como uma propriedade do objeto pessoa.

Acesso e Manipulação de Propriedades
Você pode acessar e manipular propriedades de objetos de várias maneiras:

Acesso direto:

javascript
Copiar código
console.log(pessoa.nome); // Saída: 'João'
console.log(pessoa.idade); // Saída: 30
Acesso por variável (usando colchetes []):

javascript
Copiar código
let propriedade = 'altura';
console.log(pessoa[propriedade]); // Saída: 1.75
Acesso a propriedades aninhadas:

javascript
Copiar código
console.log(pessoa.endereco.rua); // Saída: 'Rua das Flores'
Adição ou modificação de propriedades:

javascript
Copiar código
pessoa.profissao = 'Programador'; // Adiciona uma nova propriedade
pessoa.idade = 31; // Modifica uma propriedade existente
Métodos em Objetos
Em JavaScript, os métodos são funções que estão associadas a objetos. Eles são definidos como propriedades cujo valor é uma função. Dentro do método, a palavra-chave especial this se refere ao objeto atual ao qual o método pertence, permitindo acesso às suas outras propriedades e métodos.

No exemplo anterior, saudacao é um método que utiliza this para acessar as propriedades nome e idade do objeto pessoa.

Prototipagem e Herança
JavaScript é uma linguagem baseada em protótipos, o que significa que objetos podem herdar propriedades e métodos de outros objetos. Isso é feito através de protótipos, que permitem a definição de métodos e propriedades compartilhados por todos os objetos de um tipo específico.

Por exemplo, se você criar um objeto Animal com métodos e propriedades comuns a todos os animais, você pode criar novos objetos (como Cachorro, Gato, etc.) que herdam essas propriedades e métodos do objeto Animal.

Conclusão
Objetos em JavaScript são fundamentais para organizar e manipular dados de forma estruturada e flexível. Eles permitem representar entidades complexas, encapsular funcionalidades relacionadas e facilitar a manutenção do código. Compreender como criar, acessar e manipular objetos é essencial para trabalhar eficientemente com JavaScript em projetos web e de desenvolvimento de software em geral.
 